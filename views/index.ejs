<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Thingy</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bulma/0.9.3/css/bulma.min.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@creativebulma/bulma-tooltip@1.2.0/dist/bulma-tooltip.min.css" integrity="sha256-OdzWB7wl1AMkFaqhYBnoQJGUJMDAexXa44rXs/d2n4A=" crossorigin="anonymous">
  <link rel="stylesheet" href="https://www.jsdelivr.com/package/npm/@creativebulma/bulma-tagsinput/dist/css/bulma-tagsinput.min.css" />
  <script src="https://kit.fontawesome.com/943ab53432.js" crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/@creativebulma/bulma-tagsinput@1.0.3/dist/js/bulma-tagsinput.min.js"></script>
  <style>
    html{
        background-color: #1e2029;
        color:white;
    }
    body {
        margin-top:50px;
      background-color: #1e2029;
      color: #fff;

      font-family: 'Open sans', Tahoma, Geneva, Verdana, sans-serif;
      font-weight: 600;
    }

    .item-container {
      display: flex;
      justify-content: center;
      align-items: center;
      margin-bottom: 1.5rem;
      background-color: #282a36;
      margin-left:20%;
      margin-right:20%;
      padding: 1rem;
      border-radius: 6px;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      transition: all 0.3s ease;
    }
    .item{
      transition: box-shadow 0.3s ease-in-out;
    }
    .item:hover {
      box-shadow: 0 0 10px rgba(98, 114, 164, 0.8);
}
    .item-container:hover {
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
      transform: translateY(-2px);
    }

    .item-title {
      flex-grow: 1;
      text-align: left;
    }

    .button-container {
      display: flex;
      justify-content: flex-end;
    } 
    .title{
        color:white;
    }

    .button {
      margin-left: 0.5rem;
    }

    .button.is-primary, .button.is-danger {
      transition: all 0.3s ease;
    }

    .button.is-primary:hover, .button.is-danger:hover,.button.is-custom:hover {
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      transform: translateY(-1px);
    }
    .modal-card-head,
.modal-card-foot {
  background-color: #282a36;
  border: none;
}

.modal-card-title {
  color: #fff;
}

.modal-card-body{
  background-color: #1e2029 !important;
}
.notification.is-dark{
  background-color: #282a36;
  color: #fff;
  border: none;
}

.modal-card-body .label,
.modal-card-body .input,
.modal-card-body .select select {
  color: #fff;
}

.modal-card-body .input,
.modal-card-body .select select {
  background-color: #282a36;
  border-color: #282a36;
}

.modal-card-body .input:hover,
.modal-card-body .select select:hover {
  border-color: #3e6baf;
}

.modal-card-body .input:focus,
.modal-card-body .select select:focus {
  border-color: #3e6baf;
  box-shadow: 0 0 0 0.125em rgba(62, 107, 175, 0.25);
}

.modal-card-body .select select {
  width: 100%;
} 

.button.is-primary, .button.is-custom{
   color:#fff;
  background-color: #6272a4;
  border-color: transparent;
}

.button.is-primary:hover {
  background-color: #7986ab;
  border-color: transparent;
}

.button.is-primary:focus {
  border-color: transparent;
  box-shadow: 0 0 0 0.125em rgba(62, 107, 175, 0.25);
}
.settings-icon {
  position: fixed;
  top: 1rem;
  right: 1rem;
  font-size: 1.5rem;
  z-index: 1000;
}

.settings-icon a {
  color: #fff;
}

.settings-icon a:hover {
  color: #3e6baf;
}
/* toggle switch */
.switch {
  position: relative;
  display: inline-block;
  width: 60px;
  height: 34px;
  margin-left: 15px;
  margin-right: 10px;
}

.switch input {
  opacity: 0;
  width: 0;
  height: 0;
}

.slider {
  position: absolute;
  cursor: pointer;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: #424242;
  transition: .4s;
}

.slider:before {
  position: absolute;
  content: "";
  height: 26px;
  width: 26px;
  left: 4px;
  bottom: 4px;
  background-color: white;
  transition: .4s;
}

input:checked + .slider {
  background-color: #4CAF50;
}

input:checked + .slider:before {
  transform: translateX(26px);
}
label {
  white-space: nowrap;
}
.beta-tag {
  display: inline-block;
  vertical-align: middle;
}
.slider.round {
  border-radius: 34px;
}

.slider.round:before {
  border-radius: 50%;
}


.center-container,.loader-container {
  display: flex;
  justify-content: center;
  align-items: center;
}

.loader {
  border: 5px solid white;
  border-radius: 50%;
  border-top: 5px #9e579d solid;
  width: 50px;
  height: 50px;
  animation: spin 2s linear infinite;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

/* input picker  */
.modal-card-body .input[type="date"] {
  background-color: #282a36;
  border-color: #282a36;
  color: #fff;
}

.modal-card-body .input[type="date"]:hover {
  border-color: #3e6baf;
}

.modal-card-body .input[type="date"]:focus {
  border-color: #3e6baf;
  box-shadow: 0 0 0 0.125em rgba(62, 107, 175, 0.25);
}
.notify{
  z-index: 999;position: absolute;bottom: 50px;left:50px; width:200px; text-align: center; transition: all 0.5s ease-in-out;
}

</style>
</head>
<body>
    <div class="settings-icon">
          <i class="fas fa-cog"></i>
        </a>
      </div>
      
    <header>
        <div class="container has-text-centered">
            <h1 class="title">Class List</h1>
        </div>
    </header>
  <section class="section">
    <div class="container">
      <% Courses.forEach(element => { %>
      <div class="item-container">
        <div class="item-title">
          <%= element.name %>
        </div>
        <div class="button-container">
            <button class="button is-primary" data-param="<%= element.id %>">Generate</button>         
            <button class="button is-danger" onclick='hideCourse("<%= element.id %>")'>Hide</button>
        </div>
      </div>
      <% }) %>
  
      <!-- generate model -->
      <div class="modal" id="myModal">
        <div class="modal-background"></div>
        <div class="modal-card">
          <header class="modal-card-head">
            <p class="modal-card-title">Generate</p>
            <button class="delete" aria-label="close"></button>
          </header>
          <section class="modal-card-body">
            <div class="notification is-dark">
              <div class="has-text-centered" id="preLoad">Loading assignments...</div>
              <div class="loader-container">
                <div id="load" class="loader" style="display:inline-block;"></div>
                <div id="postLoad"></div>
              </div>
            </div>
            <div class="field">
              <label class="label">Select ClickUp List</label>
              <div class="control">
                <div class="select is-fullwidth">
                  <select id="clickUpList">
                    <% if (clickUp.defaultSpaceId) { %>
                      <% clickUp.spaces.forEach(element => { %>
                        <% if(element.id == clickUp.defaultSpaceId) { %>
                          <% element.lists.forEach(list => { %>
                            <option value="<%= list.id %>"><%= list.name %></option>
                          <% }) %>
                      <% }}) %>
                    <% } %>
                  </select>
                </div>
              </div>
            </div>
            <div class="field">
              <label class="label">
                Cutoff Date
                <span class="icon is-small has-tooltip-arrow has-tooltip-right" data-tooltip="Assignments due after this date will not be added.">
                  <i class="fad fa-question-circle"></i>
                </span>
              </label>
              <div class="control">
                <input class="input" type="date" id="cutoffDate">
              </div>
            </div>
            <div class="field">
              <label class="label">
                Ignore Tags (not done)
                <span class="icon is-small has-tooltip-arrow has-tooltip-right" data-tooltip="Assignments' name that have tags within them will be ignored.">
                  <i class="fad fa-question-circle"></i>
                </span>
              </label>
              <div class="control">
                <input class="input" type="text" data-type="tags" placeholder="Choose Tags" id="ignore-tags">
              </div>
            </div>
            <div class="center-container">
            <div class="field is-horizontal">
              <div class="field-label is-normal">
                <label class="label" for="ignoreDuplicates">Ignore duplicates</label>
              </div>
              <div class="field-body">
                <div class="field">
                  <div class="control">
                    <label class="switch">
                      <input type="checkbox" id="ignoreDuplicates" checked>
                      <span class="slider round"></span>
                    </label>
                  </div>
                </div>
              </div>
            </div>
          </div>
            
          </section>
          <footer class="modal-card-foot">
            <button class="button is-info is-centered" id="generate" disabled onclick="generate()">Submit</button>
          </footer>
        </div>
      </div>   
      
      
      <!-- settings modal -->
      <div class="modal" id="settingsModal">
        <div class="modal-background"></div>
        <div class="modal-card">
          <header class="modal-card-head">
            <p class="modal-card-title">Settings</p>
            <button class="delete" aria-label="close"></button>
          </header>
          <section class="modal-card-body">
            <div class="field">
              <label class="label">ClickUp API Key</label>
              <div class="control">
                <input class="input" type="text" id="clickup" placeholder="Enter your ClickUp API key" value="<%= clickUpKey %>">
              </div>
            </div>
            <div class="field">
              <label class="label">Canvas Key</label>
              <div class="control">
                <input class="input" type="text" id="canvas" placeholder="Enter your ClickUp API key" value="<%= canvasKey %>">
              </div>
            </div>
            <div class="field">
              <label class="label">Default ClickUp Space</label>
              <div class="control">
                <div class="select is-fullwidth">
                  <select id="defaultClickUpSpace">
                    <% if (clickUp.spaces.length <= 0) { %>
                      <!-- This option will show if there is no spaces or clickup auth -->
                      <option hidden selected>Please enter clickup key and update lists first.</option>
                    <% }else if(clickUp.defaultSpaceId == ""){ %>
                      <!-- this option will show if they are authenticated but haven't chosen a default list yet -->  
                      <option hidden selected>Please select default list</option>
                      <% for (var key in clickUp.spaces) { %>
                        <option value="<%= clickUp.spaces[key].id %>"><%= clickUp.spaces[key].name %></option>
                      <% } %>
                    <% }else{ %>  
                      <!-- this option will show if they are authenticated and have a default list -->
                      <% for (var key in clickUp.spaces) { %>
                        <% if(clickUp.spaces[key].id == clickUp.defaultSpaceId){ %>
                          <option value="<%= clickUp.spaces[key].id %>" selected><%= clickUp.spaces[key].name %></option>
                        <% continue;} %>
                        <option value="<%= clickUp.spaces[key].id %>" ><%= clickUp.spaces[key].name %></option>
                      <% } %>
                    <% } %>
                  </select>
                </div>
              </div>
            </div>
      
            <div class="field is-grouped" style="justify-content: center;">
                <div class="control">
                  <button class="button is-info" id="updateButton" onclick="forceClickUp()">
                    <span class="icon">
                      <i class="fas fa-sync-alt"></i>
                    </span>
                    <span>Update ClickUp</span>
                  </button>
                </div>
                <div class="control">
                  <button class="button is-info" onclick="hideCourse(-1)">
                    <span class="icon">
                      <i class="fas fa-eye"></i>
                    </span>
                    <span>Show all classes</span>
                  </button>
                </div>
              </div>
          </section>
          <footer class="modal-card-foot">
            <button class="button is-custom is-centered" onclick="saveSettings()">Save</button>
          </footer>
        </div>
      </div>
      
    </div>
  </section>
  <div class="notification is-success notify is-hidden" id="generateNotify">
    Success
  </div>
</body>
<script>
    let currentParam;

    document.addEventListener('DOMContentLoaded', () => {
      const settingsModal = document.getElementById('settingsModal');
      const settingsIcon = document.querySelector('.settings-icon');
      const settingsCloseButton = settingsModal.querySelector('.delete');
  
      const myModal = document.getElementById('myModal');
      const generateButtons = document.querySelectorAll('.button.is-primary');
      const myModalCloseButton = myModal.querySelector('.delete');
      const preLoad = document.getElementById('preLoad');
      const load = document.getElementById('load');
      const postLoad = document.getElementById('postLoad');
      const submitButton = document.getElementById('generate');
      const clickUpList = document.getElementById('clickUpList');
      const ignoreDuplicates = document.getElementById('ignoreDuplicates');
      const ignoreTags = document.getElementById('ignore-tags');
      let cutoffDate = document.querySelector('#cutoffDate');
      let today = new Date().toISOString().split('T')[0];
      cutoffDate.setAttribute("min",today);
      new BulmaTagsInput(ignoreTags);
      settingsIcon.addEventListener('click', () => {
        settingsModal.classList.add('is-active');
      });
  
      settingsCloseButton.addEventListener('click', () => {
        settingsModal.classList.remove('is-active');
      });
  
      settingsModal.querySelector('.modal-background').addEventListener('click', () => {
        settingsModal.classList.remove('is-active');
      });
  
      generateButtons.forEach(button => {
        
        button.addEventListener('click', async(event) => {
            currentParam = event.currentTarget.dataset.param;
            myModal.classList.add('is-active');
            
            const res = await fetch('/api/getAssignments/' + currentParam);
          
            const data = await res.json();
            preLoad.classList.add('is-hidden');
            load.classList.add('is-hidden');
            submitButton.disabled = false;
            postLoad.innerHTML = `${data.courseName} has ${data.assignments.length} future assignments.`;
        });
    });

  
      myModalCloseButton.addEventListener('click', () => {
        myModal.classList.remove('is-active');
        preLoad.classList.remove('is-hidden');
        load.classList.remove('is-hidden');
        postLoad.innerHTML = '';
        submitButton.disabled = true;
      });
  
      myModal.querySelector('.modal-background').addEventListener('click', () => {
        myModal.classList.remove('is-active');
        preLoad.classList.remove('is-hidden');
        load.classList.remove('is-hidden');
        postLoad.innerHTML = '';
        submitButton.disabled = true;
      });
    });
    function hideCourse(id) {
        fetch('/api/hide/' + id, {
            method: 'GET',
        }).then(res => {
            if (res.ok) {
                console.log('Course hidden');
                window.location.reload();
            }
        })
    }
    function forceClickUp(){
        fetch('/forceClickUpPull', {
            method: 'GET',
        }).then(res => {
            if (res.ok) {
                console.log('ClickUp updated');
                window.location.reload();
            }
        })
    }
    function saveSettings(){
        let canvasKey = document.querySelector('#canvas').value;
        let clickUpKey = document.querySelector('#clickup').value;
        let defaultClickUpSpace = document.querySelector('#defaultClickUpSpace').value;
        if(canvasKey != "" && canvasKey != canvasKeySaved){
            fetch('/api/saveKey/canvas/' + canvasKey, {
                method: 'GET',
            }).then(res => {
                if (res.ok) {
                    console.log('Canvas key saved');
                    settingsModal.classList.remove('is-active');
                }
            })
        }
        if(clickUpKey != "" && clickUpKey != clickUpKeySaved){
            fetch('/api/saveKey/clickup/' + clickUpKey, {
                method: 'GET',
            }).then(res => {
                if (res.ok) {
                    console.log('ClickUp key saved');
                    settingsModal.classList.remove('is-active');
                }
            })
        }
        if(defaultClickUpSpace != "" && defaultClickUpSpace != defaultClickUpSpaceSaved){
            fetch('/api/saveKey/defaultClickUpSpace/' + defaultClickUpSpace, {
                method: 'GET',
            }).then(res => {
                if (res.ok) {
                    console.log('Default ClickUp Space saved');
                    window.location.reload();
                }
            })
        }
        settingsModal.classList.remove('is-active');
    }
    const notify = document.getElementById('generateNotify');
    function generate(){
        let cutOff = (cutoffDate.value == "") ? "none" : cutoffDate.value;
        fetch(`/api/generate?clickUpList=${clickUpList.value}&ignoreDuplicates=${ignoreDuplicates.checked}&courseID=${currentParam}&cutOffDate=${cutOff}`, {
            method: 'GET',
        }).then(res => {
            if (res.ok) {
                console.log('Assignments generated');
                notify.classList.remove('is-hidden');
                setTimeout(() => {
                    notify.classList.add('is-hidden');
                }, 3000);
            }else{
                console.log('Error generating assignments');
                notify.classList.remove('is-hidden');
                notify.classList.remove('is-success')
                notify.classList.add('is-danger');
                notify.innerHTML = 'Error generating assignments';
                setTimeout(() => {
                    notify.classList.add('is-hidden');
                    notify.classList.add('is-success')
                    notify.classList.remove('is-danger');
                    notify.innerHTML = 'Success';
                }, 3000);

            }
        })
    }
    let canvasKeySaved = "<%= canvasKey %>";
    let clickUpKeySaved = "<%= clickUpKey %>";
    let defaultClickUpSpaceSaved = "<%= clickUp.defaultSpaceId %>";
    if(canvasKeySaved == "" || clickUpKeySaved == "") {
        alert("Please enter your Canvas and ClickUp API keys in the settings page.");
    }
    let clickUp = {
        //yes I know this shows up as an error, but it works, and it should not be changed
        spaces: <%-JSON.stringify(clickUp)%>
    }
  </script>
  
  
</html>
